-- SCRIPT: PRY2204_S6_Implementacion.sql
-- Objetivo: Crear modelo relacional para Consultorio Médico - Semana 6
-- Notas: Ejecutar conectado como PRY2204_S6 (o ADMIN en Oracle Cloud para crear usuario)
-- Incluye: borrado de objetos, creación de tablas, constraints, y ALTERs para Caso 2.

-- ====================================================
-- 0) LIMPIEZA ROBUSTA: Borrar objetos si existen
-- ====================================================
BEGIN
   FOR obj IN (
      SELECT object_name, object_type
      FROM user_objects
      WHERE object_name IN (
         'REGION','ESPECIALIDAD','COMUNA','TIPO_RECETA','DIGITADOR',
         'MEDICO','PACIENTE','MEDICAMENTO','RECETA','RECETA_MEDICAMENTO','PAGO'
      )
   ) LOOP
      BEGIN
         EXECUTE IMMEDIATE 'DROP ' || obj.object_type || ' "' || obj.object_name || '" CASCADE CONSTRAINTS';
      EXCEPTION
         WHEN OTHERS THEN NULL;
      END;
   END LOOP;
END;
/

-- =========================================================
-- 1) Tablas maestras básicas: REGION, ESPECIALIDAD, COMUNA
-- =========================================================

CREATE TABLE REGION (
    region_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre       VARCHAR2(100) NOT NULL,
    codigo       VARCHAR2(20)
);

-- ESPECIALIDAD con IDENTITY automático
CREATE TABLE ESPECIALIDAD (
    especialidad_id   NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre            VARCHAR2(100) NOT NULL,
    descripcion       VARCHAR2(4000)
);

-- COMUNA con identidad que inicia en 1101 e incrementa en 1
-- Oracle: GENERATED ... AS IDENTITY (START WITH 1101 INCREMENT BY 1)
CREATE TABLE COMUNA (
    comuna_id    NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1101 INCREMENT BY 1) PRIMARY KEY,
    nombre       VARCHAR2(100) NOT NULL,
    region_id    NUMBER NOT NULL,
    CONSTRAINT fk_comuna_region FOREIGN KEY (region_id) REFERENCES REGION(region_id)
);

-- ====================================================
-- 2) Tabla tipo_receta (catalogo de tipos de receta)
-- ====================================================
CREATE TABLE TIPO_RECETA (
    tipo_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre     VARCHAR2(50) NOT NULL UNIQUE
    -- Ejemplos: DIGITAL, MAGISTRAL, RETENIDA, GENERAL, VETERINARIA
);

-- ====================================================
-- 3) Usuarios que ingresan recetas: DIGITADOR
--    (asumimos que tienen RUT sin usar como PK - se maneja rut_num + dv)
-- ====================================================
CREATE TABLE DIGITADOR (
    digitador_id    NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(150) NOT NULL,
    rut_num         VARCHAR2(20) NOT NULL, -- parte numérica del RUT sin puntos
    dv              CHAR(1) NOT NULL,
    correo          VARCHAR2(150),
    CONSTRAINT uq_digitador_rut UNIQUE (rut_num, dv),
    CONSTRAINT chk_digitador_dv CHECK (REGEXP_LIKE(dv, '^[0-9K]$'))
);

-- ====================================================
-- 4) MEDICO
--    - telefono debe ser único en la base de datos
--    - relacion con ESPECIALIDAD
--    - dv chequeo 0-9 o K
-- ====================================================
CREATE TABLE MEDICO (
    medico_id       NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(150) NOT NULL,
    rut_num         VARCHAR2(20) NOT NULL,
    dv              CHAR(1) NOT NULL,
    telefono        VARCHAR2(30) NOT NULL,
    correo          VARCHAR2(150),
    especialidad_id NUMBER,
    CONSTRAINT uq_medico_telefono UNIQUE (telefono),
    CONSTRAINT uq_medico_rut UNIQUE (rut_num, dv),
    CONSTRAINT chk_medico_dv CHECK (REGEXP_LIKE(dv, '^[0-9K]$')),
    CONSTRAINT fk_medico_especialidad FOREIGN KEY (especialidad_id) REFERENCES ESPECIALIDAD(especialidad_id)
);

-- ========================================================================================================
-- 5) PACIENTE
--    - Guardamos dirección completa: ciudad, comuna (FK), region redundante opcional
--    - Inicialmente incluimos columna EDAD (para luego, en Caso 2, eliminarla y agregar fecha_nacimiento)
--    - dv chequeo 0-9 o K
-- ========================================================================================================
CREATE TABLE PACIENTE (
    paciente_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre          VARCHAR2(150) NOT NULL,
    rut_num         VARCHAR2(20) NOT NULL,
    dv              CHAR(1) NOT NULL,
    edad            NUMBER,  -- se pide eliminar en Caso 2 y reemplazar por fecha_nacimiento
    fecha_registro  DATE DEFAULT SYSDATE,
    direccion_calle VARCHAR2(200),
    ciudad          VARCHAR2(100),
    comuna_id       NUMBER,
    region_id       NUMBER,
    telefono        VARCHAR2(50),
    correo          VARCHAR2(150),
    CONSTRAINT fk_paciente_comuna FOREIGN KEY (comuna_id) REFERENCES COMUNA(comuna_id),
    CONSTRAINT fk_paciente_region FOREIGN KEY (region_id) REFERENCES REGION(region_id),
    CONSTRAINT uq_paciente_rut UNIQUE (rut_num, dv),
    CONSTRAINT chk_paciente_dv CHECK (REGEXP_LIKE(dv, '^[0-9K]$'))
);

-- =======================================================================================
-- 6) MEDICAMENTO
--    - identificador único
--    - nombre, dosis, stock, tipo (marca/genérico), precio unitario se agrega en Caso 2
-- =======================================================================================
CREATE TABLE MEDICAMENTO (
    medicamento_id      NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre              VARCHAR2(200) NOT NULL,
    dosis_recomendada   VARCHAR2(100),
    stock_disponible    NUMBER DEFAULT 0,
    tipo_medicamento    VARCHAR2(50) -- ejemplo: GENERICO, MARCA
    -- precio_unitario se añadirá en Caso 2 mediante ALTER TABLE
);

-- =======================================================================================================
-- 7) RECETA
--    - Una receta tiene un único diagnóstico (texto), emitida por un médico, ingresada por un digitador,
--      fecha_emision, observaciones, fecha_expiracion opcional, tipo_receta FK, paciente FK.
--    - Cada receta posee identificador único (PK)
-- =======================================================================================================
CREATE TABLE RECETA (
    receta_id         NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    paciente_id       NUMBER NOT NULL,
    medico_id         NUMBER NOT NULL,
    digitador_id      NUMBER NOT NULL, -- es quien ingresa la receta al sistema
    tipo_receta_id    NUMBER NOT NULL,
    fecha_emision     DATE DEFAULT SYSDATE,
    fecha_expiracion  DATE,
    diagnostico       VARCHAR2(4000) NOT NULL, -- 1 diagnóstico por receta
    observaciones     VARCHAR2(4000),
    CONSTRAINT fk_receta_paciente FOREIGN KEY (paciente_id) REFERENCES PACIENTE(paciente_id),
    CONSTRAINT fk_receta_medico FOREIGN KEY (medico_id) REFERENCES MEDICO(medico_id),
    CONSTRAINT fk_receta_digitador FOREIGN KEY (digitador_id) REFERENCES DIGITADOR(digitador_id),
    CONSTRAINT fk_receta_tipo FOREIGN KEY (tipo_receta_id) REFERENCES TIPO_RECETA(tipo_id)
);

-- =======================================================================================
-- 8) RECETA_MEDICAMENTO (tabla intermedia: una receta puede tener 1..N medicamentos)
--    - incluye cantidad y dosis indicada por receta (puede diferir de dosis_recomendada)
-- =======================================================================================
CREATE TABLE RECETA_MEDICAMENTO (
    receta_med_id     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    receta_id         NUMBER NOT NULL,
    medicamento_id    NUMBER NOT NULL,
    cantidad          NUMBER DEFAULT 1 CHECK (cantidad >= 1),
    dosis_indicada    VARCHAR2(100),
    instrucciones     VARCHAR2(4000),
    CONSTRAINT fk_rm_receta FOREIGN KEY (receta_id) REFERENCES RECETA(receta_id) ON DELETE CASCADE,
    CONSTRAINT fk_rm_medicamento FOREIGN KEY (medicamento_id) REFERENCES MEDICAMENTO(medicamento_id)
);

-- ===========================================================================================================
-- 9) PAGO
--    - Cada pago está asociado a una receta (1 receta puede tener N pagos). Registra monto y fecha.
--    - El método de pago será restringido por CASE 2 mediante ALTER (agregarse después según el enunciado)
-- ===========================================================================================================
CREATE TABLE PAGO (
    pago_id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    receta_id        NUMBER NOT NULL,
    monto_pagado     NUMBER(12,2) NOT NULL CHECK (monto_pagado >= 0),
    fecha_pago       DATE DEFAULT SYSDATE,
    metodo_pago      VARCHAR2(50),
    referencia_pago  VARCHAR2(200),
    CONSTRAINT fk_pago_receta FOREIGN KEY (receta_id) REFERENCES RECETA(receta_id)
);

-- ========================================================
-- 10) Índices y constraints adicionales si son necesarios
-- ==========================================================================================================
-- (Se puede añadir índices con CREATE INDEX si se requiere mejorar performance) Por ahora no es necesario.

-- ==========================================================================================================
-- 11) Caso 2: modificaciones requeridas mediante ALTER TABLE
--     - Agregar precio unitario por medicamento (entre $1.000 y $2.000.000)
--     - Restringir métodos de pago a EFECTIVO, TARJETA, TRANSFERENCIA
--     - Eliminar columna EDAD de PACIENTE y añadir FECHA_NACIMIENTO
-- ==========================================================================

-- 11.1 Agregar columna precio_unitario a MEDICAMENTO y constraint de rango
ALTER TABLE MEDICAMENTO
ADD (precio_unitario NUMBER(12,2));

-- Agregar constraint para rango de precio (1000 a 2000000)
ALTER TABLE MEDICAMENTO
ADD CONSTRAINT chk_medicamento_precio_range CHECK (
    precio_unitario IS NULL OR (precio_unitario >= 1000 AND precio_unitario <= 2000000)
);

-- 11.2 Agregar restricción de métodos de pago (según especificación: EFECTIVO, TARJETA, TRANSFERENCIA)
ALTER TABLE PAGO
ADD CONSTRAINT chk_pago_metodo CHECK (
    metodo_pago IS NULL OR metodo_pago IN ('EFECTIVO', 'TARJETA', 'TRANSFERENCIA')
);

-- 11.3 Remover columna EDAD y agregar fecha_nacimiento
-- Primero, si existe edad y contiene datos importantes, considerar migración — aquí se elimina directamente.
ALTER TABLE PACIENTE DROP COLUMN edad;

ALTER TABLE PACIENTE
ADD (fecha_nacimiento DATE);

-- ================================================================================
-- 12) Población de referencia para TIPO_RECETA (opcional: insertar tipos pedidos)
-- ================================================================================
INSERT INTO TIPO_RECETA (nombre) VALUES ('DIGITAL');
INSERT INTO TIPO_RECETA (nombre) VALUES ('MAGISTRAL');
INSERT INTO TIPO_RECETA (nombre) VALUES ('RETENIDA');
INSERT INTO TIPO_RECETA (nombre) VALUES ('GENERAL');
INSERT INTO TIPO_RECETA (nombre) VALUES ('VETERINARIA');

COMMIT;

SELECT * FROM TIPO_RECETA;

-- FIN DEL SCRIPT